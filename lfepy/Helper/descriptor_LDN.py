import numpy as np
from scipy.signal import convolve2d
from lfepy.Helper.gauss_gradient import gauss_gradient


def descriptor_LDN(image, **kwargs):
    """
    Compute the Local Descriptor using Kirsch or Gaussian masks.
    This function computes a local descriptor for an input image using different masks
    based on the specified options. The masks include Kirsch masks for various sizes
    or a Gaussian gradient mask. The size of the mask can be adjusted through the
    `msize` parameter, and the `sigma` parameter controls the standard deviation for
    the Gaussian mask.

    :param image: The input image for which the descriptor is computed.
    :type image: numpy.ndarray
    :param kwargs: Additional optional parameters to customize the mask:
        - 'mask' (str): Type of mask to use. Options are 'kirsch' (default) or 'gaussian'.
        - 'msize' (int): Size of the Kirsch mask. Options are 3, 5, 7, 9, or 11 (default is 3).
        - 'sigma' (float): Standard deviation for the Gaussian mask (default is 0.5).
    :type kwargs: dict, optional

    :returns: The local descriptor matrix computed using the specified mask.
    :rtype: numpy.ndarray

    :raises ValueError: If an invalid mask type or size is provided.

    :example:
        >>> import numpy as np
        >>> from skimage.data import camera
        >>> image = camera()
        >>> descriptor = descriptor_LDN(image, mask='kirsch', msize=5)
        >>> print(descriptor.shape)
    """
    if kwargs is None:
        options = {}
    else:
        options = kwargs

    mask = 'kirsch'
    msize = 3
    sigma = 0.5

    if 'mask' in options:
        mask = options['mask']
    if 'msize' in options:
        msize = options['msize']
    if 'sigma' in options:
        sigma = options['sigma']

    if mask == 'gaussian':
        D = gauss_gradient(sigma)
    elif mask == 'kirsch':
        if msize == 3:
            D = np.zeros((3, 3, 8))
            # East
            D[:, :, 0] = np.array([[-3, -3, 5],
                                   [-3, 0, 5],
                                   [-3, -3, 5]])
            # North East
            D[:, :, 1] = np.array([[-3, 5, 5],
                                   [-3, 0, 5],
                                   [-3, -3, -3]])
            # North
            D[:, :, 2] = np.array([[5, 5, 5],
                                   [-3, 0, -3],
                                   [-3, -3, -3]])
            # North West
            D[:, :, 3] = np.array([[5, 5, -3],
                                   [5, 0, -3],
                                   [-3, -3, -3]])
            # West
            D[:, :, 4] = np.array([[5, -3, -3],
                                   [5, 0, -3],
                                   [5, -3, -3]])
            # South West
            D[:, :, 5] = np.array([[-3, -3, -3],
                                   [5, 0, -3],
                                   [5, 5, -3]])
            # South
            D[:, :, 6] = np.array([[-3, -3, -3],
                                   [-3, 0, -3],
                                   [5, 5, 5]])
            # South East
            D[:, :, 7] = np.array([[-3, -3, -3],
                                   [-3, 0, 5],
                                   [-3, 5, 5]])
        elif msize == 5:
            D = np.zeros((5, 5, 8))
            # East
            D[:, :, 0] = np.array([[-5, -5, -5, -5, 11],
                                   [-5, -3, -3, 5, 11],
                                   [-5, -3, 0, 5, 11],
                                   [-5, -3, -3, 5, 11],
                                   [-5, -5, -5, -5, 11]])
            # North East
            D[:, :, 1] = np.array([[-5, -5, 11, 11, 11],
                                   [-5, -3, 5, 5, 11],
                                   [-5, -3, 0, 5, 11],
                                   [-5, -3, -3, -3, -5],
                                   [-5, -5, -5, -5, -5]])
            # North
            D[:, :, 2] = np.array([[11, 11, 11, 11, 11],
                                   [-5, 5, 5, 5, -5],
                                   [-5, -3, 0, -3, -5],
                                   [-5, -3, -3, -3, -5],
                                   [-5, -5, -5, -5, -5]])
            # North West
            D[:, :, 3] = np.array([[11, 11, 11, -5, -5],
                                   [11, 5, 5, -3, -5],
                                   [11, 5, 0, -3, -5],
                                   [-5, -3, -3, -3, -5],
                                   [-5, -5, -5, -5, -5]])
            # West
            D[:, :, 4] = np.array([[11, -5, -5, -5, -5],
                                   [11, 5, -3, -3, -5],
                                   [11, 5, 0, -3, -5],
                                   [11, 5, -3, -3, -5],
                                   [11, -5, -5, -5, -5]])
            # South West
            D[:, :, 5] = np.array([[-5, -5, -5, -5, -5],
                                   [-5, -3, -3, -3, -5],
                                   [11, 5, 0, -3, -5],
                                   [11, 5, 5, -3, -5],
                                   [11, 11, 11, -5, -5]])
            # South
            D[:, :, 6] = np.array([[-5, -5, -5, -5, -5],
                                   [-5, -3, -3, -3, -5],
                                   [-5, -3, 0, -3, -5],
                                   [-5, 5, 5, 5, -5],
                                   [11, 11, 11, 11, 11]])
            # South East
            D[:, :, 7] = np.array([[-5, -5, -5, -5, -5],
                                   [-5, -3, -3, -3, -5],
                                   [-5, -3, 0, 5, 11],
                                   [-5, -3, 5, 5, 11],
                                   [-5, -5, 11, 11, 11]])
        elif msize == 7:
            D = np.zeros((7, 7, 8))
            # East
            D[:, :, 0] = np.array([[-7, -7, -7, -7, -7, -7, 17],
                                   [-7, -5, -5, -5, -5, 11, 17],
                                   [-7, -5, -3, -3, 5, 11, 17],
                                   [-7, -5, -3, 0, 5, 11, 17],
                                   [-7, -5, -3, -3, 5, 11, 17],
                                   [-7, -5, -5, -5, -5, 11, 17],
                                   [-7, -7, -7, -7, -7, -7, 17]])
            # North East
            D[:, :, 1] = np.array([[-7, -7, -7, 17, 17, 17, 17],
                                   [-7, -5, -5, 11, 11, 11, 17],
                                   [-7, -5, -3, 5, 5, 11, 17],
                                   [-7, -5, -3, 0, 5, 11, 17],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -7, -7, -7, -7, -7, -7]])
            # North
            D[:, :, 2] = np.array([[17, 17, 17, 17, 17, 17, 17],
                                   [-7, 11, 11, 11, 11, 11, -7],
                                   [-7, -5, 5, 5, 5, -5, -7],
                                   [-7, -5, -3, 0, -3, -5, -7],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -7, -7, -7, -7, -7, -7]])
            # North West
            D[:, :, 3] = np.array([[17, 17, 17, 17, -7, -7, -7],
                                   [17, 11, 11, 11, -5, -5, -7],
                                   [17, 11, 5, 5, -3, -5, -7],
                                   [17, 11, 5, 0, -3, -5, -7],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -7, -7, -7, -7, -7, -7]])
            # West
            D[:, :, 4] = np.array([[17, -7, -7, -7, -7, -7, -7],
                                   [17, 11, -5, -5, -5, -5, -7],
                                   [17, 11, 5, -3, -3, -5, -7],
                                   [17, 11, 5, 0, -3, -5, -7],
                                   [17, 11, 5, -3, -3, -5, -7],
                                   [17, 11, -5, -5, -5, -5, -7],
                                   [17, -7, -7, -7, -7, -7, -7]])
            # South West
            D[:, :, 5] = np.array([[-7, -7, -7, -7, -7, -7, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [17, 11, 5, 0, -3, -5, -7],
                                   [17, 11, 5, 5, -3, -5, -7],
                                   [17, 11, 11, 11, -5, -5, -7],
                                   [17, 17, 17, 17, -7, -7, -7]])
            # South East
            D[:, :, 6] = np.array([[-7, -7, -7, -7, -7, -7, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [-7, -5, -3, 0, -3, -5, -7],
                                   [-7, -5, 5, 5, 5, -5, -7],
                                   [-7, 11, 11, 11, 11, 11, -7],
                                   [17, 17, 17, 17, 17, 17, 17]])
            # South
            D[:, :, 7] = np.array([[-7, -7, -7, -7, -7, -7, -7],
                                   [-7, -5, -5, -5, -5, -5, -7],
                                   [-7, -5, -3, -3, -3, -5, -7],
                                   [-7, -5, -3, 0, -3, -5, -7],
                                   [-7, -5, 5, 5, 5, -5, -7],
                                   [-7, 11, 11, 11, 11, 11, -7],
                                   [17, 17, 17, 17, 17, 17, 17]])
        elif msize == 9:
            D = np.zeros((9, 9, 8))
            # East
            D[:, :, 0] = [[-9, -9, -9, -9, -9, -9, -9, -9, 23],
                          [-9, -7, -7, -7, -7, -7, -7, 17, 23],
                          [-9, -7, -5, -5, -5, -5, 11, 17, 23],
                          [-9, -7, -5, -3, -3, 5, 11, 17, 23],
                          [-9, -7, -5, -3, 0, 5, 11, 17, 23],
                          [-9, -7, -5, -3, -3, 5, 11, 17, 23],
                          [-9, -7, -5, -5, -5, -5, 11, 17, 23],
                          [-9, -7, -7, -7, -7, -7, -7, 17, 23],
                          [-9, -9, -9, -9, -9, -9, -9, -9, 23]]
            # North East
            D[:, :, 1] = [[-9, -9, -9, -9, 23, 23, 23, 23, 23],
                          [-9, -7, -7, -7, 17, 17, 17, 17, 23],
                          [-9, -7, -5, -5, 11, 11, 11, 17, 23],
                          [-9, -7, -5, -3, 5, 5, 11, 17, 23],
                          [-9, -7, -5, -3, 0, 5, 11, 17, 23],
                          [-9, -7, -5, -3, -3, -3, -5, -7, -9],
                          [-9, -7, -5, -5, -5, -5, -5, -7, -9],
                          [-9, -7, -7, -7, -7, -7, -7, -7, -9],
                          [-9, -9, -9, -9, -9, -9, -9, -9, -9]]
            # North
            D[:, :, 2] = [[23, 23, 23, 23, 23, 23, 23, 23, 23],
                          [-9, 17, 17, 17, 17, 17, 17, 17, -9],
                          [-9, -7, 11, 11, 11, 11, 11, -7, -9],
                          [-9, -7, -5, 5, 5, 5, -5, -7, -9],
                          [-9, -7, -5, -3, 0, -3, -5, -7, -9],
                          [-9, -7, -5, -3, -3, -3, -5, -7, -9],
                          [-9, -7, -5, -5, -5, -5, -5, -7, -9],
                          [-9, -7, -7, -7, -7, -7, -7, -7, -9],
                          [-9, -9, -9, -9, -9, -9, -9, -9, -9]]
            # North West
            D[:, :, 3] = [[23, 23, 23, 23, 23, -9, -9, -9, -9],
                          [23, 17, 17, 17, 17, -7, -7, -7, -9],
                          [23, 17, 11, 11, 11, -5, -5, -7, -9],
                          [23, 17, 11, 5, 5, -3, -5, -7, -9],
                          [23, 17, 11, 5, 0, -3, -5, -7, -9],
                          [-9, -7, -5, -3, -3, -3, -5, -7, -9],
                          [-9, -7, -5, -5, -5, -5, -5, -7, -9],
                          [-9, -7, -7, -7, -7, -7, -7, -7, -9],
                          [-9, -9, -9, -9, -9, -9, -9, -9, -9]]
            # West
            D[:, :, 4] = [[23, 23, 23, 23, 23, 23, 23, 23, 23],
                          [23, 17, 17, 17, 17, 17, 17, 17, 23],
                          [23, 17, 11, 11, 11, 11, 11, 17, 23],
                          [23, 17, 11, 5, 5, 5, 11, 17, 23],
                          [23, 17, 11, 5, 0, 0, 0, 0, 0, 17],
                          [23, 17, 11, 5, 0, -3, -3, -3, -3, 17],
                          [23, 17, 11, 11, 11, -5, -5, -7, -9],
                          [23, 17, 17, 17, 17, -7, -7, -7, -9],
                          [23, 23, 23, 23, 23, -9, -9, -9, -9]]
            # South West
            D[:, :, 5] = [[23, -9, -9, -9, -9, -9, -9, -9, -9],
                          [23, 17, -7, -7, -7, -7, -7, -7, -9],
                          [23, 17, 11, -5, -5, -5, -5, -7, -9],
                          [23, 17, 11, 5, -3, -3, -5, -7, -9],
                          [23, 17, 11, 5, 0, -3, -5, -7, -9],
                          [23, 17, 11, 5, -3, -3, -5, -7, -9],
                          [23, 17, 11, -5, -5, -5, -5, -7, -9],
                          [23, 17, -7, -7, -7, -7, -7, -7, -9],
                          [23, -9, -9, -9, -9, -9, -9, -9, -9]]
            # South East
            D[:, :, 6] = [[-9, -9, -9, -9, -9, -9, -9, -9, -9],
                          [-9, -7, -7, -7, -7, -7, -7, -7, -9],
                          [-9, -7, -5, -5, -5, -5, -5, -7, -9],
                          [-9, -7, -5, -3, -3, -3, -5, -7, -9],
                          [-9, -7, -5, -3, 0, 5, 11, 17, 23],
                          [-9, -7, -5, -3, 5, 5, 11, 17, 23],
                          [-9, -7, -5, 5, 5, 5, -5, -7, -9],
                          [-9, -7, 11, 11, 11, 11, 11, -7, -9],
                          [-9, 17, 17, 17, 17, 17, 17, 17, -9]]
            # South
            D[:, :, 7] = [[-9, -9, -9, -9, -9, -9, -9, -9, -9],
                          [-9, -7, -7, -7, -7, -7, -7, -7, -9],
                          [-9, -7, -5, -5, -5, -5, -5, -7, -9],
                          [-9, -7, -5, -3, -3, -3, -5, -7, -9],
                          [-9, -7, -5, -3, 0, -3, -5, -7, -9],
                          [-9, -7, -5, 5, 5, 5, -5, -7, -9],
                          [-9, -7, 11, 11, 11, 11, 11, -7, -9],
                          [-9, 17, 17, 17, 17, 17, 17, 17, -9],
                          [23, 23, 23, 23, 23, 23, 23, 23, 23]]
        elif msize == 11:
            D = np.zeros((11, 11, 8))
            # East
            D[:, :, 0] = [[-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, 29],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, 23, 29],
                          [-11, -9, -7, -7, -7, -7, -7, -7, 17, 23, 29],
                          [-11, -9, -7, -5, -5, -5, -5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, -3, 5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, 0, 5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, -3, 5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -5, -5, -5, 11, 17, 23, 29],
                          [-11, -9, -7, -7, -7, -7, -7, -7, 17, 23, 29],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, 23, 29],
                          [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, 29]]
            # North East
            D[:, :, 1] = [[-11, -11, -11, -11, -11, 29, 29, 29, 29, 29, 29],
                          [-11, -9, -9, -9, -9, 23, 23, 23, 23, 23, 29],
                          [-11, -9, -7, -7, -7, 17, 17, 17, 17, 23, 29],
                          [-11, -9, -7, -5, -5, 11, 11, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, 5, 5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, 0, 5, 11, 17, 23, 29],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11]]
            # North
            D[:, :, 2] = [[29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29],
                          [-11, 23, 23, 23, 23, 23, 23, 23, 23, 23, -11],
                          [-11, -9, 17, 17, 17, 17, 17, 17, 17, -9, -11],
                          [-11, -9, -7, 11, 11, 11, 11, 11, -7, -9, -11],
                          [-11, -9, -7, -5, 5, 5, 5, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, 0, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11]]
            # North West
            D[:, :, 3] = [[29, 29, 29, 29, 29, 29, -11, -11, -11, -11, -11],
                          [29, 23, 23, 23, 23, 23, -9, -9, -9, -9, -11],
                          [29, 23, 17, 17, 17, 17, -7, -7, -7, -9, -11],
                          [29, 23, 17, 11, 11, 11, -5, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 5, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 0, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11]]
            # West
            D[:, :, 4] = [[29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29],
                          [29, 23, 23, 23, 23, 23, -11, -11, -11, -11, -11],
                          [29, 23, 17, 17, 17, 17, -9, -9, -9, -9, -11],
                          [29, 23, 17, 11, 11, 11, -7, -7, -7, -9, -11],
                          [29, 23, 17, 11, 5, 5, -5, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 0, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11]]
            # South West
            D[:, :, 5] = [[29, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11],
                          [29, 23, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [29, 23, 17, -7, -7, -7, -7, -7, -7, -9, -11],
                          [29, 23, 17, 11, -5, -5, -5, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, -3, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 0, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, -3, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, -5, -5, -5, -5, -7, -9, -11],
                          [29, 23, 17, -7, -7, -7, -7, -7, -7, -9, -11],
                          [29, 23, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [29, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11]]
            # South East
            D[:, :, 6] = [[-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 0, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 5, 5, -3, -5, -7, -9, -11],
                          [29, 23, 17, 11, 11, 11, -5, -5, -7, -9, -11],
                          [29, 23, 17, 17, 17, 17, -7, -7, -7, -9, -11],
                          [29, 23, 23, 23, 23, 23, -9, -9, -9, -9, -11],
                          [29, 29, 29, 29, 29, 29, -11, -11, -11, -11, -11]]
            # South
            D[:, :, 7] = [[-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11],
                          [-11, -9, -9, -9, -9, -9, -9, -9, -9, -9, -11],
                          [-11, -9, -7, -7, -7, -7, -7, -7, -7, -9, -11],
                          [-11, -9, -7, -5, -5, -5, -5, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, -3, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, -3, 0, -3, -5, -7, -9, -11],
                          [-11, -9, -7, -5, 5, 5, 5, -5, -7, -9, -11],
                          [-11, -9, -7, 11, 11, 11, 11, 11, -7, -9, -11],
                          [-11, -9, 17, 17, 17, 17, 17, 17, 17, -9, -11],
                          [-11, 23, 23, 23, 23, 23, 23, 23, 23, 23, -11],
                          [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]]
        else:
            raise ValueError('Kirsh mask size not supported. Use only: 3, 5, 7, 9, 11')

    elif mask == 'sobel':
        if msize == 3:
            D = np.zeros((3, 3, 8))
            # East
            D[:, :, 0] = [[1, 2, 1],
                          [0, 0, 0],
                          [-1, -2, -1]]
            # North East
            D[:, :, 1] = [[2, 1, 0],
                          [1, 0, -1],
                          [0, -1, -2]]
            # North
            D[:, :, 2] = [[1, 0, -1],
                          [2, 0, -2],
                          [1, 0, -1]]
            # North West
            D[:, :, 3] = [[0, -1, -2],
                          [1, 0, -1],
                          [2, 1, 0]]
            # West
            D[:, :, 4] = [[-1, -2, -1],
                          [0, 0, 0],
                          [1, 2, 1]]
            # South West
            D[:, :, 5] = [[-2, -1, 0],
                          [-1, 0, 1],
                          [0, 1, 2]]
            # South
            D[:, :, 6] = [[-1, 0, 1],
                          [-2, 0, 2],
                          [-1, 0, 1]]
            # South East
            D[:, :, 7] = [[0, 1, 2],
                          [-1, 0, 1],
                          [-2, -1, 0]]
        elif msize == 5:
            D = np.zeros((5, 5, 8))
            # East
            D[:, :, 0] = [[1, 2, 0, -2, -1],
                          [4, 8, 0, -8, -4],
                          [6, 12, 0, -12, -6],
                          [4, 8, 0, -8, -4],
                          [1, 2, 0, -2, -1]]
            # North East
            D[:, :, 1] = [[1, 4, 6, 4, 1],
                          [2, 8, 12, 8, 2],
                          [0, 0, 0, 0, 0],
                          [-2, -8, -12, -8, -2],
                          [-1, -4, -6, -4, -1]]
            # North
            D[:, :, 2] = [[-1, -4, -6, -4, -1],
                          [-2, -8, -12, -8, -2],
                          [0, 0, 0, 0, 0],
                          [2, 8, 12, 8, 2],
                          [1, 4, 6, 4, 1]]
            # North West
            D[:, :, 3] = [[-1, -2, 0, 2, 1],
                          [-4, -8, 0, 8, 4],
                          [-6, -12, 0, 12, 6],
                          [-4, -8, 0, 8, 4],
                          [-1, -2, 0, 2, 1]]
            # West
            D[:, :, 4] = [[0, 2, 1, 4, 6],
                          [-2, 0, 8, 12, 4],
                          [-1, -8, 0, 8, 1],
                          [-4, -12, -8, 0, 2],
                          [-6, -4, -1, -2, 0]]
            # South West
            D[:, :, 5] = [[6, 4, 1, 2, 0],
                          [4, 12, 8, 0, -2],
                          [1, 8, 0, -8, -1],
                          [2, 0, -8, -12, -4],
                          [0, -2, -1, -4, -6]]
            # South
            D[:, :, 6] = [[-6, -4, -1, -2, 0],
                          [-4, -12, -8, 0, 2],
                          [-1, -8, 0, 8, 1],
                          [-2, 0, 8, 12, 4],
                          [0, 2, 1, 4, 6]]
            # South East
            D[:, :, 7] = [[0, -2, -1, -4, -6],
                          [2, 0, -8, -12, -4],
                          [1, 8, 0, -8, -1],
                          [4, 12, 8, 0, -2],
                          [6, 4, 1, 2, 0]]
        elif msize == 7:
            D = np.zeros((7, 7, 8))
            # East
            D[:, :, 0] = [[1, 4, 5, 0, -5, -4, -1],
                          [6, 24, 30, 0, -30, -24, -6],
                          [15, 60, 75, 0, -75, -60, -15],
                          [20, 80, 100, 0, -100, -80, -20],
                          [15, 60, 75, 0, -75, -60, -15],
                          [6, 24, 30, 0, -30, -24, -6],
                          [1, 4, 5, 0, -5, -4, -1]]
            # North East
            D[:, :, 1] = [[1, 6, 15, 20, 15, 6, 1],
                          [4, 24, 60, 80, 60, 24, 4],
                          [5, 30, 75, 100, 75, 30, 5],
                          [0, 0, 0, 0, 0, 0, 0],
                          [-5, -30, -75, -100, -75, -30, -5],
                          [-4, -24, -60, -80, -60, -24, -4],
                          [-1, -6, -15, -20, -15, -6, -1]]
            # North
            D[:, :, 2] = [[-1, -6, -15, -20, -15, -6, -1],
                          [-4, -24, -60, -80, -60, -24, -4],
                          [-5, -30, -75, -100, -75, -30, -5],
                          [0, 0, 0, 0, 0, 0, 0],
                          [5, 30, 75, 100, 75, 30, 5],
                          [4, 24, 60, 80, 60, 24, 4],
                          [1, 6, 15, 20, 15, 6, 1]]
            # North West
            D[:, :, 3] = [[-1, -4, -5, 0, 5, 4, 1],
                          [-6, -24, -30, 0, 30, 24, 6],
                          [-15, -60, -75, 0, 75, 60, 15],
                          [-20, -80, -100, 0, 100, 80, 20],
                          [-15, -60, -75, 0, 75, 60, 15],
                          [-6, -24, -30, 0, 30, 24, 6],
                          [-1, -4, -5, 0, 5, 4, 1]]
            # West
            D[:, :, 4] = [[0, 5, 4, 1, 6, 15, 20],
                          [-5, 0, 30, 24, 60, 80, 15],
                          [-4, -30, 0, 75, 100, 60, 6],
                          [-1, -24, -75, 0, 75, 24, 1],
                          [-6, -60, -100, -75, 0, 30, 4],
                          [-15, -80, -60, -24, -30, 0, 5],
                          [-20, -15, -6, -1, -4, -5, 0]]
            # South West
            D[:, :, 5] = [[20, 15, 6, 1, 4, 5, 0],
                          [15, 80, 60, 24, 30, 0, -5],
                          [6, 60, 100, 75, 0, -30, -4],
                          [1, 24, 75, 0, -75, -24, -1],
                          [4, 30, 0, -75, -100, -60, -6],
                          [5, 0, -30, -24, -60, -80, -15],
                          [0, -5, -4, -1, -6, -15, -20]]
            # South
            D[:, :, 6] = [[-20, -15, -6, -1, -4, -5, 0],
                          [-15, -80, -60, -24, -30, 0, 5],
                          [-6, -60, -100, -75, 0, 30, 4],
                          [-1, -24, -75, 0, 75, 24, 1],
                          [-4, -30, 0, 75, 100, 60, 6],
                          [-5, 0, 30, 24, 60, 80, 15],
                          [0, 5, 4, 1, 6, 15, 20]]
            # South East
            D[:, :, 7] = [[0, -5, -4, -1, -6, -15, -20],
                          [5, 0, -30, -24, -60, -80, -15],
                          [4, 30, 0, -75, -100, -60, -6],
                          [1, 24, 75, 0, -75, -24, -1],
                          [6, 60, 100, 75, 0, -30, -4],
                          [15, 80, 60, 24, 30, 0, -5],
                          [20, 15, 6, 1, 4, 5, 0]]
        elif msize == 9:
            D = np.zeros((9, 9, 8))
            # East
            D[:, :, 0] = [[1, 6, 14, 14, 0, -14, -14, -6, -1],
                          [8, 48, 112, 112, 0, -112, -112, -48, -8],
                          [28, 168, 392, 392, 0, -392, -392, -168, -28],
                          [56, 336, 784, 784, 0, -784, -784, -336, -56],
                          [70, 420, 980, 980, 0, -980, -980, -420, -70],
                          [56, 336, 784, 784, 0, -784, -784, -336, -56],
                          [28, 168, 392, 392, 0, -392, -392, -168, -28],
                          [8, 48, 112, 112, 0, -112, -112, -48, -8],
                          [1, 6, 14, 14, 0, -14, -14, -6, -1]]
            # North East
            D[:, :, 1] = [[1, 8, 28, 56, 70, 56, 28, 8, 1],
                          [6, 48, 168, 336, 420, 336, 168, 48, 6],
                          [14, 112, 392, 784, 980, 784, 392, 112, 14],
                          [14, 112, 392, 784, 980, 784, 392, 112, 14],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [-14, -112, -392, -784, -980, -784, -392, -112, -14],
                          [-14, -112, -392, -784, -980, -784, -392, -112, -14],
                          [-6, -48, -168, -336, -420, -336, -168, -48, -6],
                          [-1, -8, -28, -56, -70, -56, -28, -8, -1]]
            # North
            D[:, :, 2] = [[-1, -8, -28, -56, -70, -56, -28, -8, -1],
                          [-6, -48, -168, -336, -420, -336, -168, -48, -6],
                          [-14, -112, -392, -784, -980, -784, -392, -112, -14],
                          [-14, -112, -392, -784, -980, -784, -392, -112, -14],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [14, 112, 392, 784, 980, 784, 392, 112, 14],
                          [14, 112, 392, 784, 980, 784, 392, 112, 14],
                          [6, 48, 168, 336, 420, 336, 168, 48, 6],
                          [1, 8, 28, 56, 70, 56, 28, 8, 1]]
            # North West
            D[:, :, 3] = [[-1, -6, -14, -14, 0, 14, 14, 6, 1],
                          [-8, -48, -112, -112, 0, 112, 112, 48, 8],
                          [-28, -168, -392, -392, 0, 392, 392, 168, 28],
                          [-56, -336, -784, -784, 0, 784, 784, 336, 56],
                          [-70, -420, -980, -980, 0, 980, 980, 420, 70],
                          [-56, -336, -784, -784, 0, 784, 784, 336, 56],
                          [-28, -168, -392, -392, 0, 392, 392, 168, 28],
                          [-8, -48, -112, -112, 0, 112, 112, 48, 8],
                          [-1, -6, -14, -14, 0, 14, 14, 6, 1]]
            # West
            D[:, :, 4] = [[0, 14, 14, 6, 1, 8, 28, 56, 70],
                          [-14, 0, 112, 112, 48, 168, 336, 420, 56],
                          [-14, -112, 0, 392, 392, 784, 980, 336, 28],
                          [-6, -112, -392, 0, 784, 980, 784, 168, 8],
                          [-1, -48, -392, -784, 0, 784, 392, 48, 1],
                          [-8, -168, -784, -980, -784, 0, 392, 112, 6],
                          [-28, -336, -980, -784, -392, -392, 0, 112, 14],
                          [-56, -420, -336, -168, -48, -112, -112, 0, 14],
                          [-70, -56, -28, -8, -1, -6, -14, -14, 0]]
            # South West
            D[:, :, 5] = [[70, 56, 28, 8, 1, 6, 14, 14, 0],
                          [56, 420, 336, 168, 48, 112, 112, 0, -14],
                          [28, 336, 980, 784, 392, 392, 0, -112, -14],
                          [8, 168, 784, 980, 784, 0, -392, -112, -6],
                          [1, 48, 392, 784, 0, -784, -392, -48, -1],
                          [6, 112, 392, 0, -784, -980, -784, -168, -8],
                          [14, 112, 0, -392, -392, -784, -980, -336, -28],
                          [14, 0, -112, -112, -48, -168, -336, -420, -56],
                          [0, -14, -14, -6, -1, -8, -28, -56, -70]]
            # South
            D[:, :, 6] = [[-70, -56, -28, -8, -1, -6, -14, -14, 0],
                          [-56, -420, -336, -168, -48, -112, -112, 0, 14],
                          [-28, -336, -980, -784, -392, -392, 0, 112, 14],
                          [-8, -168, -784, -980, -784, 0, 392, 112, 6],
                          [-1, -48, -392, -784, 0, 784, 392, 48, 1],
                          [-6, -112, -392, 0, 784, 980, 784, 168, 8],
                          [-14, -112, 0, 392, 392, 784, 980, 336, 28],
                          [-14, 0, 112, 112, 48, 168, 336, 420, 56],
                          [0, 14, 14, 6, 1, 8, 28, 56, 70]]
            # South East
            D[:, :, 7] = [[0, -14, -14, -6, -1, -8, -28, -56, -70],
                          [14, 0, -112, -112, -48, -168, -336, -420, -56],
                          [14, 112, 0, -392, -392, -784, -980, -336, -28],
                          [6, 112, 392, 0, -784, -980, -784, -168, -8],
                          [1, 48, 392, 784, 0, -784, -392, -48, -1],
                          [8, 168, 784, 980, 784, 0, -392, -112, -6],
                          [28, 336, 980, 784, 392, 392, 0, -112, -14],
                          [56, 420, 336, 168, 48, 112, 112, 0, -14],
                          [70, 56, 28, 8, 1, 6, 14, 14, 0]]
        elif msize == 11:
            D = np.zeros((11, 11, 8))
            # East
            D[:, :, 0] = [[1, 8, 27, 48, 42, 0, -42, -48, -27, -8, -1],
                          [10, 80, 270, 480, 420, 0, -420, -480, -270, -80, -10],
                          [45, 360, 1215, 2160, 1890, 0, -1890, -2160, -1215, -360, -45],
                          [120, 960, 3240, 5760, 5040, 0, -5040, -5760, -3240, -960, -120],
                          [210, 1680, 5670, 10080, 8820, 0, -8820, -10080, -5670, -1680, -210],
                          [252, 2016, 6804, 12096, 10584, 0, -10584, -12096, -6804, -2016, -252],
                          [210, 1680, 5670, 10080, 8820, 0, -8820, -10080, -5670, -1680, -210],
                          [120, 960, 3240, 5760, 5040, 0, -5040, -5760, -3240, -960, -120],
                          [45, 360, 1215, 2160, 1890, 0, -1890, -2160, -1215, -360, -45],
                          [10, 80, 270, 480, 420, 0, -420, -480, -270, -80, -10],
                          [1, 8, 27, 48, 42, 0, -42, -48, -27, -8, -1]]
            # North East
            D[:, :, 1] = [[-1, -10, -45, -120, -210, -252, -210, -120, -45, -10, -1],
                          [-8, -80, -360, -960, -1680, -2016, -1680, -960, -360, -80, -8],
                          [-27, -270, -1215, -3240, -5670, -6804, -5670, -3240, -1215, -270, -27],
                          [-48, -480, -2160, -5760, -10080, -12096, -10080, -5760, -2160, -480, -48],
                          [-42, -420, -1890, -5040, -8820, -10584, -8820, -5040, -1890, -420, -42],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [42, 420, 1890, 5040, 8820, 10584, 8820, 5040, 1890, 420, 42],
                          [48, 480, 2160, 5760, 10080, 12096, 10080, 5760, 2160, 480, 48],
                          [27, 270, 1215, 3240, 5670, 6804, 5670, 3240, 1215, 270, 27],
                          [8, 80, 360, 960, 1680, 2016, 1680, 960, 360, 80, 8],
                          [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]]
            # North
            D[:, :, 2] = [[-1, -8, -27, -48, -42, 0, 42, 48, 27, 8, 1],
                          [-10, -80, -270, -480, -420, 0, 420, 480, 270, 80, 10],
                          [-45, -360, -1215, -2160, -1890, 0, 1890, 2160, 1215, 360, 45],
                          [-120, -960, -3240, -5760, -5040, 0, 5040, 5760, 3240, 960, 120],
                          [-210, -1680, -5670, -10080, -8820, 0, 8820, 10080, 5670, 1680, 210],
                          [-252, -2016, -6804, -12096, -10584, 0, 10584, 12096, 6804, 2016, 252],
                          [-210, -1680, -5670, -10080, -8820, 0, 8820, 10080, 5670, 1680, 210],
                          [-120, -960, -3240, -5760, -5040, 0, 5040, 5760, 3240, 960, 120],
                          [-45, -360, -1215, -2160, -1890, 0, 1890, 2160, 1215, 360, 45],
                          [-10, -80, -270, -480, -420, 0, 420, 480, 270, 80, 10],
                          [-1, -8, -27, -48, -42, 0, 42, 48, 27, 8, 1]]
            # North West
            D[:, :, 3] = [[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1],
                          [8, 80, 360, 960, 1680, 2016, 1680, 960, 360, 80, 8],
                          [27, 270, 1215, 3240, 5670, 6804, 5670, 3240, 1215, 270, 27],
                          [48, 480, 2160, 5760, 10080, 12096, 10080, 5760, 2160, 480, 48],
                          [42, 420, 1890, 5040, 8820, 10584, 8820, 5040, 1890, 420, 42],
                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                          [-42, -420, -1890, -5040, -8820, -10584, -8820, -5040, -1890, -420, -42],
                          [-48, -480, -2160, -5760, -10080, -12096, -10080, -5760, -2160, -480, -48],
                          [-27, -270, -1215, -3240, -5670, -6804, -5670, -3240, -1215, -270, -27],
                          [-8, -80, -360, -960, -1680, -2016, -1680, -960, -360, -80, -8],
                          [-1, -10, -45, -120, -210, -252, -210, -120, -45, -10, -1]]
            # West
            D[:, :, 4] = [[1, 8, 27, 48, 42, 0, -42, -48, -27, -8, -1],
                          [10, 80, 270, 480, 420, 0, -420, -480, -270, -80, -10],
                          [45, 360, 1215, 2160, 1890, 0, -1890, -2160, -1215, -360, -45],
                          [120, 960, 3240, 5760, 5040, 0, -5040, -5760, -3240, -960, -120],
                          [210, 1680, 5670, 10080, 8820, 0, -8820, -10080, -5670, -1680, -210],
                          [252, 2016, 6804, 12096, 10584, 0, -10584, -12096, -6804, -2016, -252],
                          [210, 1680, 5670, 10080, 8820, 0, -8820, -10080, -5670, -1680, -210],
                          [120, 960, 3240, 5760, 5040, 0, -5040, -5760, -3240, -960, -120],
                          [45, 360, 1215, 2160, 1890, 0, -1890, -2160, -1215, -360, -45],
                          [10, 80, 270, 480, 420, 0, -420, -480, -270, -80, -10],
                          [1, 8, 27, 48, 42, 0, -42, -48, -27, -8, -1]]
            # South West
            D[:, :, 5] = [[0, -42, -48, -27, -8, -1, -10, -45, -120, -210, -252],
                          [42, 0, -420, -480, -270, -80, -360, -960, -1680, -2016, -210],
                          [48, 420, 0, -1890, -2160, -1215, -3240, -5670, -6804, -1680, -120],
                          [27, 480, 1890, 0, -5040, -5760, -10080, -12096, -5670, -960, -45],
                          [8, 270, 2160, 5040, 0, -8820, -10584, -10080, -3240, -360, -10],
                          [1, 80, 1215, 5760, 8820, 0, -8820, -5760, -1215, -80, -1],
                          [10, 360, 3240, 10080, 10584, 8820, 0, -5040, -2160, -270, -8],
                          [45, 960, 5670, 12096, 10080, 5760, 5040, 0, -1890, -480, -27],
                          [120, 1680, 6804, 5670, 3240, 1215, 2160, 1890, 0, -420, -48],
                          [210, 2016, 1680, 960, 360, 80, 270, 480, 420, 0, -42],
                          [252, 210, 120, 45, 10, 1, 8, 27, 48, 42, 0]]
            # South
            D[:, :, 6] = [[252, 210, 120, 45, 10, 1, 8, 27, 48, 42, 0],
                          [210, 2016, 1680, 960, 360, 80, 270, 480, 420, 0, -42],
                          [120, 1680, 6804, 5670, 3240, 1215, 2160, 1890, 0, -420, -48],
                          [45, 960, 5670, 12096, 10080, 5760, 5040, 0, -1890, -480, -27],
                          [10, 360, 3240, 10080, 10584, 8820, 0, -5040, -2160, -270, -8],
                          [1, 80, 1215, 5760, 8820, 0, -8820, -5760, -1215, -80, -1],
                          [8, 270, 2160, 5040, 0, -8820, -10584, -10080, -3240, -360, -10],
                          [27, 480, 1890, 0, -5040, -5760, -10080, -12096, -5670, -960, -45],
                          [48, 420, 0, -1890, -2160, -1215, -3240, -5670, -6804, -1680, -120],
                          [42, 0, -420, -480, -270, -80, -360, -960, -1680, -2016, -210],
                          [0, -42, -48, -27, -8, -1, -10, -45, -120, -210, -252]]
            # South East
            D[:, :, 7] = [[-252, -210, -120, -45, -10, -1, -8, -27, -48, -42, 0],
                          [-210, -2016, -1680, -960, -360, -80, -270, -480, -420, 0, 42],
                          [-120, -1680, -6804, -5670, -3240, -1215, -2160, -1890, 0, 420, 48],
                          [-45, -960, -5670, -12096, -10080, -5760, -5040, 0, 1890, 480, 27],
                          [-10, -360, -3240, -10080, -10584, -8820, 0, 5040, 2160, 270, 8],
                          [-1, -80, -1215, -5760, -8820, 0, 8820, 5760, 1215, 80, 1],
                          [-8, -270, -2160, -5040, 0, 8820, 10584, 10080, 3240, 360, 10],
                          [-27, -480, -1890, 0, 5040, 5760, 10080, 12096, 5670, 960, 45],
                          [-48, -420, 0, 1890, 2160, 1215, 3240, 5670, 6804, 1680, 120],
                          [-42, 0, 420, 480, 270, 80, 360, 960, 1680, 2016, 210],
                          [0, 42, 48, 27, 8, 1, 10, 45, 120, 210, 252]]
        else:
            raise ValueError('Sobel mask size not supported. Use only: 3, 5, 7, 9, 11')
    elif mask == 'prewitt':
        if msize == 3:
            D = np.zeros((3, 3, 8))
            # East
            D[:, :, 0] = np.array([[1, 1, 1],
                                   [0, 0, 0],
                                   [-1, -1, -1]])
            # North East
            D[:, :, 1] = np.array([[1, 1, 0],
                                   [1, 0, -1],
                                   [0, -1, -1]])
            # North
            D[:, :, 2] = np.array([[1, 0, -1],
                                   [1, 0, -1],
                                   [1, 0, -1]])
            # North West
            D[:, :, 3] = np.array([[0, -1, -1],
                                   [1, 0, -1],
                                   [1, 1, 0]])
            # West
            D[:, :, 4] = np.array([[-1, -1, -1],
                                   [0, 0, 0],
                                   [1, 1, 1]])
            # South West
            D[:, :, 5] = np.array([[-1, -1, 0],
                                   [-1, 0, 1],
                                   [0, 1, 1]])
            # South
            D[:, :, 6] = np.array([[-1, 0, 1],
                                   [-1, 0, 1],
                                   [-1, 0, 1]])
            # South East
            D[:, :, 7] = np.array([[0, 1, 1],
                                   [-1, 0, 1],
                                   [-1, -1, 0]])
        elif msize == 5:
            D = np.zeros((5, 5, 8))
            # East
            D[:, :, 0] = np.array([[2, 2, 2, 2, 2],
                                   [1, 1, 1, 1, 1],
                                   [0, 0, 0, 0, 0],
                                   [-1, -1, -1, -1, -1],
                                   [-2, -2, -2, -2, -2]])
            # North East
            D[:, :, 1] = np.array([[2, 1, 0, -1, -2],
                                   [2, 1, 0, -1, -2],
                                   [2, 1, 0, -1, -2],
                                   [2, 1, 0, -1, -2],
                                   [2, 1, 0, -1, -2]])
            # North
            D[:, :, 2] = np.array([[-2, -1, 0, 1, 2],
                                   [-2, -1, 0, 1, 2],
                                   [-2, -1, 0, 1, 2],
                                   [-2, -1, 0, 1, 2],
                                   [-2, -1, 0, 1, 2]])
            # North West
            D[:, :, 3] = np.array([[-2, -2, -2, -2, -2],
                                   [-1, -1, -1, -1, -1],
                                   [0, 0, 0, 0, 0],
                                   [1, 1, 1, 1, 1],
                                   [2, 2, 2, 2, 2]])
            # West
            D[:, :, 4] = np.array([[-2, -2, -2, -1, 0],
                                   [-2, -1, -1, 0, 1],
                                   [-2, -1, 0, 1, 2],
                                   [-1, 0, 1, 1, 2],
                                   [0, 1, 2, 2, 2]])
            # South West
            D[:, :, 5] = np.array([[0, 1, 2, 2, 2],
                                   [-1, 0, 1, 1, 2],
                                   [-2, -1, 0, 1, 2],
                                   [-2, -1, -1, 0, 1],
                                   [-2, -2, -2, -1, 0]])
            # South
            D[:, :, 6] = np.array([[0, -1, -2, -2, -2],
                                   [1, 0, -1, -1, -2],
                                   [2, 1, 0, -1, -2],
                                   [2, 1, 1, 0, -1],
                                   [2, 2, 2, 1, 0]])
            # South East
            D[:, :, 7] = np.array([[2, 2, 2, 1, 0],
                                   [2, 1, 1, 0, -1],
                                   [2, 1, 0, -1, -2],
                                   [1, 0, -1, -1, -2],
                                   [0, -1, -2, -2, -2]])
        elif msize == 7:
            D = np.zeros((7, 7, 8))
            # East
            D[:, :, 0] = np.array([[3, 3, 3, 3, 3, 3, 3],
                                   [2, 2, 2, 2, 2, 2, 2],
                                   [1, 1, 1, 1, 1, 1, 1],
                                   [0, 0, 0, 0, 0, 0, 0],
                                   [-1, -1, -1, -1, -1, -1, -1],
                                   [-2, -2, -2, -2, -2, -2, -2],
                                   [-3, -3, -3, -3, -3, -3, -3]])
            # North East
            D[:, :, 1] = np.array([[3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3]])
            # North
            D[:, :, 2] = np.array([[-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3]])
            # North West
            D[:, :, 3] = np.array([[-3, -3, -3, -3, -3, -3, -3],
                                   [-2, -2, -2, -2, -2, -2, -2],
                                   [-1, -1, -1, -1, -1, -1, -1],
                                   [0, 0, 0, 0, 0, 0, 0],
                                   [1, 1, 1, 1, 1, 1, 1],
                                   [2, 2, 2, 2, 2, 2, 2],
                                   [3, 3, 3, 3, 3, 3, 3]])
            # West
            D[:, :, 4] = np.array([[-3, -3, -3, -3, -2, -1, 0],
                                   [-3, -2, -2, -2, -1, 0, 1],
                                   [-3, -2, -1, -1, 0, 1, 2],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-2, -1, 0, 1, 1, 2, 3],
                                   [-1, 0, 1, 2, 2, 2, 3],
                                   [0, 1, 2, 3, 3, 3, 3]])
            # South West
            D[:, :, 5] = np.array([[0, 1, 2, 3, 3, 3, 3],
                                   [-1, 0, 1, 2, 2, 2, 3],
                                   [-2, -1, 0, 1, 1, 2, 3],
                                   [-3, -2, -1, 0, 1, 2, 3],
                                   [-3, -2, -1, -1, 0, 1, 2],
                                   [-3, -2, -2, -2, -1, 0, 1],
                                   [-3, -3, -3, -3, -2, -1, 0]])
            # South
            D[:, :, 6] = np.array([[0, -1, -2, -3, -3, -3, -3],
                                   [1, 0, -1, -2, -2, -2, -3],
                                   [2, 1, 0, -1, -1, -2, -3],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [3, 2, 1, 1, 0, -1, -2],
                                   [3, 2, 2, 2, 1, 0, -1],
                                   [3, 3, 3, 3, 2, 1, 0]])
            # South East
            D[:, :, 7] = np.array([[3, 3, 3, 3, 2, 1, 0],
                                   [3, 2, 2, 2, 1, 0, -1],
                                   [3, 2, 1, 1, 0, -1, -2],
                                   [3, 2, 1, 0, -1, -2, -3],
                                   [2, 1, 0, -1, -1, -2, -3],
                                   [1, 0, -1, -2, -2, -2, -3],
                                   [0, -1, -2, -3, -3, -3, -3]])
        elif msize == 9:
            D = np.zeros((9, 9, 8))
            # East
            D[:, :, 0] = np.array([[4, 4, 4, 4, 4, 4, 4, 4, 4],
                                   [3, 3, 3, 3, 3, 3, 3, 3, 3],
                                   [2, 2, 2, 2, 2, 2, 2, 2, 2],
                                   [1, 1, 1, 1, 1, 1, 1, 1, 1],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [-1, -1, -1, -1, -1, -1, -1, -1, -1],
                                   [-2, -2, -2, -2, -2, -2, -2, -2, -2],
                                   [-3, -3, -3, -3, -3, -3, -3, -3, -3],
                                   [-4, -4, -4, -4, -4, -4, -4, -4, -4]])
            # North East
            D[:, :, 1] = np.array([[4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4]])
            # North
            D[:, :, 2] = np.array([[-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4]])
            # North West
            D[:, :, 3] = np.array([[-4, -4, -4, -4, -4, -4, -4, -4, -4],
                                   [-3, -3, -3, -3, -3, -3, -3, -3, -3],
                                   [-2, -2, -2, -2, -2, -2, -2, -2, -2],
                                   [-1, -1, -1, -1, -1, -1, -1, -1, -1],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [1, 1, 1, 1, 1, 1, 1, 1, 1],
                                   [2, 2, 2, 2, 2, 2, 2, 2, 2],
                                   [3, 3, 3, 3, 3, 3, 3, 3, 3],
                                   [4, 4, 4, 4, 4, 4, 4, 4, 4]])
            # West
            D[:, :, 4] = np.array([[-4, -4, -4, -4, -4, -3, -2, -1, 0],
                                   [-4, -3, -3, -3, -3, -2, -1, 0, 1],
                                   [-4, -3, -2, -2, -2, -1, 0, 1, 2],
                                   [-4, -3, -2, -1, -1, 0, 1, 2, 3],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-3, -2, -1, 0, 1, 1, 2, 3, 4],
                                   [-2, -1, 0, 1, 2, 2, 2, 3, 4],
                                   [-1, 0, 1, 2, 3, 3, 3, 3, 4],
                                   [0, 1, 2, 3, 4, 4, 4, 4, 4]])
            # South West
            D[:, :, 5] = np.array([[0, 1, 2, 3, 4, 4, 4, 4, 4],
                                   [-1, 0, 1, 2, 3, 3, 3, 3, 4],
                                   [-2, -1, 0, 1, 2, 2, 2, 3, 4],
                                   [-3, -2, -1, 0, 1, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, 0, 1, 2, 3, 4],
                                   [-4, -3, -2, -1, -1, 0, 1, 2, 3],
                                   [-4, -3, -2, -2, -2, -1, 0, 1, 2],
                                   [-4, -3, -3, -3, -3, -2, -1, 0, 1],
                                   [-4, -4, -4, -4, -4, -3, -2, -1, 0]])
            # South
            D[:, :, 6] = np.array([[0, -1, -2, -3, -4, -4, -4, -4, -4],
                                   [1, 0, -1, -2, -3, -3, -3, -3, -4],
                                   [2, 1, 0, -1, -2, -2, -2, -3, -4],
                                   [3, 2, 1, 0, -1, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [4, 3, 2, 1, 1, 0, -1, -2, -3],
                                   [4, 3, 2, 2, 2, 1, 0, -1, -2],
                                   [4, 3, 3, 3, 3, 2, 1, 0, -1],
                                   [4, 4, 4, 4, 4, 3, 2, 1, 0]])
            # South East
            D[:, :, 7] = np.array([[4, 4, 4, 4, 4, 3, 2, 1, 0],
                                   [4, 3, 3, 3, 3, 2, 1, 0, -1],
                                   [4, 3, 2, 2, 2, 1, 0, -1, -2],
                                   [4, 3, 2, 1, 1, 0, -1, -2, -3],
                                   [4, 3, 2, 1, 0, -1, -2, -3, -4],
                                   [3, 2, 1, 0, -1, -1, -2, -3, -4],
                                   [2, 1, 0, -1, -2, -2, -2, -3, -4],
                                   [1, 0, -1, -2, -3, -3, -3, -3, -4],
                                   [0, -1, -2, -3, -4, -4, -4, -4, -4]])
        elif msize == 11:
            D = np.zeros((11, 11, 8))
            # East
            D[:, :, 0] = np.array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                                   [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                                   [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                                   [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                                   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                                   [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
                                   [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
                                   [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4],
                                   [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5]])
            # North East
            D[:, :, 1] = np.array([[5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]])
            # North
            D[:, :, 2] = np.array([[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]])
            # North West
            D[:, :, 3] = np.array([[-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5],
                                   [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4],
                                   [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
                                   [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
                                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                   [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                                   [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
                                   [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
                                   [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
            # West
            D[:, :, 4] = np.array([[0, -1, -2, -3, -4, -5, -5, -5, -5, -5, -5],
                                   [1, 0, -1, -2, -3, -4, -4, -4, -4, -4, -5],
                                   [2, 1, 0, -1, -2, -3, -3, -3, -3, -4, -5],
                                   [3, 2, 1, 0, -1, -2, -2, -2, -3, -4, -5],
                                   [4, 3, 2, 1, 0, -1, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [5, 4, 3, 2, 1, 1, 0, -1, -2, -3, -4],
                                   [5, 4, 3, 2, 2, 2, 1, 0, -1, -2, -3],
                                   [5, 4, 3, 3, 3, 3, 2, 1, 0, -1, -2],
                                   [5, 4, 4, 4, 4, 4, 3, 2, 1, 0, -1],
                                   [5, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0]])
            # South West
            D[:, :, 5] = np.array([[0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5],
                                   [-1, 0, 1, 2, 3, 4, 4, 4, 4, 4, 5],
                                   [-2, -1, 0, 1, 2, 3, 3, 3, 3, 4, 5],
                                   [-3, -2, -1, 0, 1, 2, 2, 2, 3, 4, 5],
                                   [-4, -3, -2, -1, 0, 1, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-5, -4, -3, -2, -1, -1, 0, 1, 2, 3, 4],
                                   [-5, -4, -3, -2, -2, -2, -1, 0, 1, 2, 3],
                                   [-5, -4, -3, -3, -3, -3, -2, -1, 0, 1, 2],
                                   [-5, -4, -4, -4, -4, -4, -3, -2, -1, 0, 1]])
            # South
            D[:, :, 6] = np.array([[-5, -5, -5, -5, -5, -5, -4, -3, -2, -1, 0],
                                   [-5, -4, -4, -4, -4, -4, -3, -2, -1, 0, 1],
                                   [-5, -4, -3, -3, -3, -3, -2, -1, 0, 1, 2],
                                   [-5, -4, -3, -2, -2, -2, -1, 0, 1, 2, 3],
                                   [-5, -4, -3, -2, -1, -1, 0, 1, 2, 3, 4],
                                   [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
                                   [-4, -3, -2, -1, 0, 1, 1, 2, 3, 4, 5],
                                   [-3, -2, -1, 0, 1, 2, 2, 2, 3, 4, 5],
                                   [-2, -1, 0, 1, 2, 3, 3, 3, 3, 4, 5],
                                   [-1, 0, 1, 2, 3, 4, 4, 4, 4, 4, 5],
                                   [0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5]])
            # South East
            D[:, :, 7] = np.array([[5, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0],
                                   [5, 4, 4, 4, 4, 4, 3, 2, 1, 0, -1],
                                   [5, 4, 3, 3, 3, 3, 2, 1, 0, -1, -2],
                                   [5, 4, 3, 2, 2, 2, 1, 0, -1, -2, -3],
                                   [5, 4, 3, 2, 1, 1, 0, -1, -2, -3, -4],
                                   [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5],
                                   [4, 3, 2, 1, 0, -1, -1, -2, -3, -4, -5],
                                   [3, 2, 1, 0, -1, -2, -2, -2, -3, -4, -5],
                                   [2, 1, 0, -1, -2, -3, -3, -3, -3, -4, -5],
                                   [1, 0, -1, -2, -3, -4, -4, -4, -4, -4, -5],
                                   [0, -1, -2, -3, -4, -5, -5, -5, -5, -5, -5]])
        else:
            raise ValueError('Prewitt mask size not supported. Use only: 3, 5, 7, 9, 11')
    else:
        raise ValueError('Mask not supported. Use only: Kirsch, Sobel, Prewitt')

    r, c = image.shape
    R = np.zeros((r, c, 8))

    # Compute responses
    for i in range(8):
        R[:, :, i] = convolve2d(image, D[:, :, i], mode='same', boundary='symm')

    # Sort responses, from most negative to most positive
    idx = np.argsort(R, axis=2)[:, :, ::-1]

    # Return only the indexes, equivalent to orientation direction encoding [edge gradient]
    top = idx[:, :, [0, -1]]
    C = top[:, :, 0] * 8 + top[:, :, 1]

    return C